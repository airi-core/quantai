Langkah 1: Library yang dibutuhkan berhasil diimpor.

Langkah 2: Memuat dan memproses data real dari XAU_1d_data_processed.json untuk prediksi harga...
Data berhasil dimuat dari XAU_1d_data_processed.json
Melewati baris header pertama.
Melewati 1 baris yang tidak valid, merupakan header, atau tidak memiliki data label hari berikutnya.
Data real berhasil diproses dan dikonversi.
Shape Tanggal: (5294,)
Shape Fitur (X): (5294, 5)
Shape Label (y): (5294, 3)
Fitur data real berhasil diskalakan.
Label data real berhasil diskalakan.
Data real dibagi:
dates_train=(4235,), dates_test=(1059,)
X_train=(4235, 5), X_test=(1059, 5)
y_train=(4235, 3), y_test=(1059, 3)

Langkah 3: Mendefinisikan arsitektur model untuk prediksi harga multi-output...
Arsitektur model dibuat.
Model: "sequential"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ dense (Dense)                   │ (None, 32)             │           192 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (Dense)                 │ (None, 16)             │           528 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (Dense)                 │ (None, 3)              │            51 │
└─────────────────────────────────┴────────────────────────┴───────────────┘
 Total params: 771 (3.01 KB)
 Trainable params: 771 (3.01 KB)
 Non-trainable params: 0 (0.00 B)

Langkah 4: Mengkompilasi model untuk prediksi harga multi-output...
Model dikompilasi (siap untuk pelatihan).

Langkah 5: Memulai pelatihan model selama 21 epoch dengan batch size 89...
Epoch 1/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 2s 18ms/step - loss: 0.1803 - mean_absolute_error: 0.3554 - val_loss: 0.0169 - val_mean_absolute_error: 0.0980
Epoch 2/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 1s 6ms/step - loss: 0.0089 - mean_absolute_error: 0.0701 - val_loss: 0.0035 - val_mean_absolute_error: 0.0489
Epoch 3/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 7ms/step - loss: 0.0035 - mean_absolute_error: 0.0479 - val_loss: 0.0024 - val_mean_absolute_error: 0.0391
Epoch 4/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 9ms/step - loss: 0.0022 - mean_absolute_error: 0.0374 - val_loss: 0.0015 - val_mean_absolute_error: 0.0310
Epoch 5/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 1s 8ms/step - loss: 0.0014 - mean_absolute_error: 0.0297 - val_loss: 8.0196e-04 - val_mean_absolute_error: 0.0219
Epoch 6/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 6.5536e-04 - mean_absolute_error: 0.0196 - val_loss: 2.5628e-04 - val_mean_absolute_error: 0.0115
Epoch 7/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 1.9698e-04 - mean_absolute_error: 0.0102 - val_loss: 1.1311e-04 - val_mean_absolute_error: 0.0075
Epoch 8/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 5ms/step - loss: 1.1193e-04 - mean_absolute_error: 0.0076 - val_loss: 7.6716e-05 - val_mean_absolute_error: 0.0062
Epoch 9/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 8.0699e-05 - mean_absolute_error: 0.0065 - val_loss: 6.2891e-05 - val_mean_absolute_error: 0.0056
Epoch 10/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 5.9232e-05 - mean_absolute_error: 0.0057 - val_loss: 5.5973e-05 - val_mean_absolute_error: 0.0052
Epoch 11/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 5ms/step - loss: 5.2953e-05 - mean_absolute_error: 0.0053 - val_loss: 5.1589e-05 - val_mean_absolute_error: 0.0050
Epoch 12/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.8051e-05 - mean_absolute_error: 0.0050 - val_loss: 4.9278e-05 - val_mean_absolute_error: 0.0049
Epoch 13/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.5997e-05 - mean_absolute_error: 0.0049 - val_loss: 4.9099e-05 - val_mean_absolute_error: 0.0049
Epoch 14/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.6106e-05 - mean_absolute_error: 0.0049 - val_loss: 4.6631e-05 - val_mean_absolute_error: 0.0047
Epoch 15/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.6607e-05 - mean_absolute_error: 0.0048 - val_loss: 4.7172e-05 - val_mean_absolute_error: 0.0048
Epoch 16/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.4921e-05 - mean_absolute_error: 0.0048 - val_loss: 4.5254e-05 - val_mean_absolute_error: 0.0046
Epoch 17/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.3294e-05 - mean_absolute_error: 0.0047 - val_loss: 4.4898e-05 - val_mean_absolute_error: 0.0046
Epoch 18/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.0719e-05 - mean_absolute_error: 0.0046 - val_loss: 4.4825e-05 - val_mean_absolute_error: 0.0046
Epoch 19/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 5ms/step - loss: 4.2476e-05 - mean_absolute_error: 0.0047 - val_loss: 4.4136e-05 - val_mean_absolute_error: 0.0045
Epoch 20/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 5ms/step - loss: 4.4035e-05 - mean_absolute_error: 0.0046 - val_loss: 4.3819e-05 - val_mean_absolute_error: 0.0045
Epoch 21/21
39/39 ━━━━━━━━━━━━━━━━━━━━ 0s 4ms/step - loss: 4.2461e-05 - mean_absolute_error: 0.0046 - val_loss: 4.5152e-05 - val_mean_absolute_error: 0.0047
Pelatihan selesai.

Langkah 6: Mengevaluasi model pada data pengujian...
Hasil Evaluasi pada data pengujian (nilai diskalakan): Loss (MSE) = 0.000041, MAE = 0.004684

Langkah 7: Membuat prediksi pada data baru...
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 76ms/step
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
Data baru untuk prediksi (fitur setelah penskalaan) dan Tanggal:
Tanggal: 2007-04-19, Fitur Skalakan: [0.12714112 0.1259646  0.12348959 0.1239018  0.00690242]
Tanggal: 2016-05-04, Fitur Skalakan: [0.3742269  0.37203127 0.36956    0.37117153 0.14479624]
Tanggal: 2013-05-13, Fitur Skalakan: [0.44073656 0.43657577 0.43352896 0.43370187 0.27527365]
Tanggal: 2011-03-21, Fitur Skalakan: [0.4317409  0.43160546 0.43259114 0.43202168 0.02031554]
Tanggal: 2006-10-31, Fitur Skalakan: [0.09153166 0.09143122 0.089837   0.09240906 0.00510134]

Hasil Prediksi (harga output model, masih diskalakan) dan Tanggal:
Tanggal: 2007-04-19, Prediksi Skalakan: [0.12367643 0.12217449 0.12695824]
Tanggal: 2016-05-04, Prediksi Skalakan: [0.3708723  0.36958766 0.36994594]
Tanggal: 2013-05-13, Prediksi Skalakan: [0.4346988  0.43446928 0.43457896]
Tanggal: 2011-03-21, Prediksi Skalakan: [0.4308085  0.42745954 0.43263233]
Tanggal: 2006-10-31, Prediksi Skalakan: [0.08977409 0.08443491 0.09254953]

Hasil Prediksi (harga dalam skala asli) dan Tanggal:
Tanggal       | Prediksi High | Prediksi Low  | Prediksi Close
---------------------------------------------------------------
2007-04-19 | 686.5106      | 675.9205      | 689.5856      
2016-05-04 | 1287.5500     | 1272.9557     | 1276.7484     
2013-05-13 | 1442.7397     | 1429.5222     | 1432.9296     
2011-03-21 | 1433.2808     | 1412.6069     | 1428.2256     
2006-10-31 | 604.0794      | 584.8507      | 606.4395      

Harga High, Low, Close asli untuk 5 sampel terakhir di set pengujian:
Tanggal       | Asli High     | Asli Low      | Asli Close
-------------------------------------------------------------
2007-04-19 | 693.2000      | 682.9000      | 691.3000      
2016-05-04 | 1286.3700     | 1268.7900     | 1278.0900     
2013-05-13 | 1445.4700     | 1421.2300     | 1425.5601     
2011-03-21 | 1431.9301     | 1419.3199     | 1428.3101     
2006-10-31 | 619.2000      | 605.1000      | 616.7000      

MAE rata-rata pada 5 sampel prediksi baru (skala asli): 6.2827

Langkah 8: Menyimpan model...
Model berhasil disimpan dalam format HDF5 ke 'price_prediction_model.h5'
Saved artifact at 'price_prediction_savedmodel'. The following endpoints are available:

* Endpoint 'serve'
  args_0 (POSITIONAL_ONLY): TensorSpec(shape=(None, 5), dtype=tf.float32, name='keras_tensor')
Output Type:
  TensorSpec(shape=(None, 3), dtype=tf.float32, name=None)
Captures:
  135794756968208: TensorSpec(shape=(), dtype=tf.resource, name=None)
  135794756969168: TensorSpec(shape=(), dtype=tf.resource, name=None)
  135794756970896: TensorSpec(shape=(), dtype=tf.resource, name=None)
  135794756968592: TensorSpec(shape=(), dtype=tf.resource, name=None)
  135794756971088: TensorSpec(shape=(), dtype=tf.resource, name=None)
  135794756968784: TensorSpec(shape=(), dtype=tf.resource, name=None)
WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.
Model berhasil diekspor dalam format SavedModel ke 'price_prediction_savedmodel'
Model berhasil disimpan dalam format Native Keras ke 'price_prediction_model.keras'

Langkah 9: Memuat kembali model yang sudah disimpan...
Model berhasil dimuat dari 'price_prediction_model.h5' (HDF5)
Gagal memuat model dari 'price_prediction_savedmodel' (SavedModel) menggunakan tf.keras.models.load_model: File format not supported: filepath=price_prediction_savedmodel. Keras 3 only supports V3 `.keras` files and legacy H5 format files (`.h5` extension). Note that the legacy SavedModel format is not supported by `load_model()` in Keras 3. In order to reload a TensorFlow SavedModel as an inference-only layer in Keras 3, use `keras.layers.TFSMLayer(price_prediction_savedmodel, call_endpoint='serving_default')` (note that your `call_endpoint` might have a different name).
Model berhasil dimuat dari 'price_prediction_model.keras' (Native Keras)

Langkah 10: Menggunakan model yang dimuat untuk prediksi pada data baru...
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 71ms/step
/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:757: UserWarning: Skipping variable loading for optimizer 'rmsprop', because it has 8 variables whereas the saved optimizer has 14 variables. 
  saveable.load_own_variables(weights_store.get(inner_path))
Prediksi dari model yang dimuat (HDF5, skala asli) dan Tanggal:
Tanggal       | Prediksi High | Prediksi Low  | Prediksi Close
---------------------------------------------------------------
2007-04-19 | 686.5106      | 675.9205      | 689.5856      
2016-05-04 | 1287.5500     | 1272.9557     | 1276.7484     
2013-05-13 | 1442.7397     | 1429.5222     | 1432.9296     
2011-03-21 | 1433.2808     | 1412.6069     | 1428.2256     
2006-10-31 | 604.0794      | 584.8507      | 606.4395      
Verifikasi: Prediksi dari model asli dan model HDF5 yang dimuat cocok.
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 69ms/step

Prediksi dari model yang dimuat (Native Keras, skala asli) dan Tanggal:
Tanggal       | Prediksi High | Prediksi Low  | Prediksi Close
---------------------------------------------------------------
2007-04-19 | 686.5106      | 675.9205      | 689.5856      
2016-05-04 | 1287.5500     | 1272.9557     | 1276.7484     
2013-05-13 | 1442.7397     | 1429.5222     | 1432.9296     
2011-03-21 | 1433.2808     | 1412.6069     | 1428.2256     
2006-10-31 | 604.0794      | 584.8507      | 606.4395      
Verifikasi: Prediksi dari model asli dan model Native Keras yang dimuat cocok.

Pipeline AI selesai dieksekusi dengan data real untuk prediksi harga.
